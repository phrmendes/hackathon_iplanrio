import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="LICITACAO.RIO",
    page_icon="üìÑ",
    layout="wide",
)

# Fun√ß√£o para carregar o CSS externo
def carregar_css(caminho):
    with open(caminho) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# Carregar o CSS da pasta src
carregar_css("src/styles.css")

# T√≠tulo e descri√ß√£o centralizados
st.markdown('<div class="main-title">üìä Dashboard de Licita√ß√µes da Prefeitura do Rio</div>', unsafe_allow_html=True)
st.markdown('<div class="sub-title">Este dashboard apresenta uma vis√£o geral das licita√ß√µes realizadas no Licita√ß√£o.rio. Explore os gr√°ficos e KPIs abaixo para insights r√°pidos.</div>', unsafe_allow_html=True)

# Fun√ß√£o para gerar dados fict√≠cios
def gerar_dados_ficticios():
    np.random.seed(42)
    orgaos = ['Prefeitura', 'Estado', 'Minist√©rio', 'Autarquia', 'Empresa P√∫blica']
    status = ['Em andamento', 'Conclu√≠do', 'Cancelado']
    categorias = ['Servi√ßos', 'Obras', 'Equipamentos', 'Consultoria']

    dados = {
        'ID Licita√ß√£o': np.arange(1, 101),
        '√ìrg√£o': np.random.choice(orgaos, 100),
        'Categoria': np.random.choice(categorias, 100),
        'Valor Estimado (R$)': np.round(np.random.uniform(50000, 1000000, 100), 2),
        'Status': np.random.choice(status, 100),
        'Data de Abertura': pd.date_range(start='2024-01-01', periods=100).to_list(),
    }
    return pd.DataFrame(dados)

# Gerar os dados
df = gerar_dados_ficticios()

# KPIs estilizados
col1, col2, col3 = st.columns(3)
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown(
        '<div class="kpi-box">'
        '<h3>Total de Licita√ß√µes</h3>'
        '<h1 style="font-size: 48px; margin: 0;">' + f'{df["ID Licita√ß√£o"].count()}' + '</h1>'
        '</div>',
        unsafe_allow_html=True
    )

with col2:
    st.markdown(
        '<div class="kpi-box">'
        '<h3>Valor Total Estimado (R$)</h3>'
        '<h1 style="font-size: 48px; margin: 0;">' + f'R$ {df["Valor Estimado (R$)"].sum():,.2f}' + '</h1>'
        '</div>',
        unsafe_allow_html=True
    )

with col3:
    st.markdown(
        '<div class="kpi-box">'
        '<h3>Licita√ß√µes Conclu√≠das</h3>'
        '<h1 style="font-size: 48px; margin: 0;">' + f'{df[df["Status"] == "Conclu√≠do"].shape[0]}' + '</h1>'
        '</div>',
        unsafe_allow_html=True
    )

st.markdown("<br><br>", unsafe_allow_html=True)

# Gr√°fico de Distribui√ß√£o por √ìrg√£o
st.subheader("üìä Distribui√ß√£o de Licita√ß√µes por √ìrg√£o")
df_orgaos = df['√ìrg√£o'].value_counts().reset_index()
df_orgaos.columns = ['√ìrg√£o', 'N√∫mero de Licita√ß√µes']

fig1 = px.bar(
    df_orgaos,
    x='√ìrg√£o', y='N√∫mero de Licita√ß√µes',
    labels={'√ìrg√£o': '√ìrg√£o', 'N√∫mero de Licita√ß√µes': 'N√∫mero de Licita√ß√µes'},
    title='Quantidade de Licita√ß√µes por √ìrg√£o'
)
st.plotly_chart(fig1, use_container_width=True)

# Gr√°fico de Valores Estimados por Categoria
st.subheader("üí∞ Valores Estimados por Categoria")
fig2 = px.pie(
    df, values='Valor Estimado (R$)', names='Categoria',
    title='Distribui√ß√£o do Valor Estimado por Categoria'
)
st.plotly_chart(fig2, use_container_width=True)

# Filtro por Status e Data
st.subheader("üìÖ Filtro por Status e Per√≠odo")
status_selecionado = st.selectbox("Selecione o Status:", df['Status'].unique())
data_inicial = st.date_input("Data Inicial", value=pd.to_datetime('2024-01-01'))
data_final = st.date_input("Data Final", value=pd.to_datetime('2024-12-31'))



# Garantir que a coluna 'Data de Abertura' est√° no formato datetime
df['Data de Abertura'] = pd.to_datetime(df['Data de Abertura'])

# Converter as datas selecionadas pelo usu√°rio para datetime
data_inicial = pd.to_datetime(data_inicial)
data_final = pd.to_datetime(data_final)

df_filtrado = df[
    (df['Status'] == status_selecionado) &
    (df['Data de Abertura'] >= data_inicial) &
    (df['Data de Abertura'] <= data_final)
]

# Mostrar tabela filtrada
st.subheader("üìã Licita√ß√µes Filtradas")
st.dataframe(df_filtrado)

# Gr√°fico de Evolu√ß√£o Temporal
st.subheader("üìà Evolu√ß√£o Temporal das Licita√ß√µes")
fig3 = px.line(
    df_filtrado, x='Data de Abertura', y='Valor Estimado (R$)',
    title='Evolu√ß√£o do Valor Estimado ao Longo do Tempo'
)
st.plotly_chart(fig3, use_container_width=True)

# Rodap√© estilizado
st.markdown('<div class="footer">üöÄ Desenvolvido por DADOS IPLAN</div>', unsafe_allow_html=True)
